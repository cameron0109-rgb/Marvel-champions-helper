<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
<title>MC Solo iPhone Helper</title>
<style>
html,body{margin:0;padding:0;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;background:#071018;color:#e9f6f6;height:100%;overflow-x:hidden}
header{padding:12px;background:linear-gradient(90deg,#08202a,#0b2a34);display:flex;align-items:center;gap:10px}
header h1{font-size:16px;margin:0}
main{padding:10px;display:flex;flex-direction:column;gap:10px}
.card{background:#07202a;padding:10px;border-radius:12px;border:1px solid #12333b;box-shadow:0 6px 12px rgba(0,0,0,0.5)}
label{font-size:13px;display:block;margin-bottom:4px;color:#9fd9d9}
select,input,button{font-size:16px;padding:8px;border-radius:10px;border:1px solid #15484d;background:#042127;color:#dff}
button{background:#0aa;color:#012;font-weight:600}
.row{display:flex;gap:6px;flex-wrap:wrap}
.bigbtn{flex:1;padding:12px;border-radius:12px;background:#06c;color:white;font-weight:700;border:none}
.log{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,monospace;background:#00171a;padding:8px;border-radius:8px;height:140px;overflow:auto;font-size:13px}
img.cardimg{max-width:100%;border-radius:8px;margin-top:6px;border:1px solid #123;}
.center{display:flex;gap:6px;align-items:center;justify-content:center}
.thumb{width:48px;height:48px;border-radius:8px;background:#022;padding:6px;display:flex;align-items:center;justify-content:center}
.muted{opacity:0.7;font-size:13px}
.small{font-size:13px}
.scroll-horizontal{display:flex;overflow-x:auto;gap:6px;padding-bottom:6px}
.scroll-horizontal .card{flex:0 0 120px}
.side-scheme{background:#0b1c22;padding:6px;border-radius:8px;display:flex;align-items:center;gap:6px}
.side-scheme span{flex:1}
</style>
</head>
<body>
<header>
  <div class="thumb">MC</div>
  <h1>MC Solo Helper</h1>
</header>
<main>
  <!-- Hero Section -->
  <section class="card">
    <div class="small muted">Hero</div>
    <div class="row">
      <select id="heroSelect" style="flex:1">
        <option value="">Select Hero...</option>
        <option value="spider">Spider-Man</option>
        <option value="iron">Iron Man</option>
        <option value="marvel">Captain Marvel</option>
      </select>
      <button id="loadHero">Load Hero</button>
    </div>
    <div style="margin-top:6px" class="small muted">Deck: <span id="deckCount">0</span> cards</div>
    <div class="scroll-horizontal" id="handDisplay"></div>
  </section>

  <!-- Villain Section -->
  <section class="card">
    <div class="small muted">Villain</div>
    <div class="row">
      <select id="villainSel" style="flex:1">
        <option value="rhino">Rhino</option>
        <option value="klaw">Klaw</option>
        <option value="ultron">Ultron</option>
      </select>
      <select id="difficulty">
        <option value="normal">Normal (I+II)</option>
        <option value="expert">Expert (II+III)</option>
      </select>
      <select id="modular">
        <option value="standard">Standard</option>
        <option value="modular">Modular</option>
      </select>
      <button id="loadVillain">Load Villain</button>
    </div>
    <div style="margin-top:6px" id="villainInfo" class="muted small"></div>
    <div style="margin-top:6px" id="villainCard"></div>
  </section>

  <!-- Minions & Schemes -->
  <section class="card">
    <div class="row">
      <div style="flex:1">
        <div class="small muted">Minions in Play</div>
        <div class="row"><button id="minionMinus">-</button><span id="minionsCount">0</span><button id="minionPlus">+</button></div>
      </div>
      <div style="flex:1">
        <div class="small muted">Main Scheme Threat</div>
        <div class="row"><button id="threatMinus">-</button><span id="threatCount">0</span><button id="threatPlus">+</button></div>
      </div>
    </div>
    <div style="margin-top:6px" class="small muted">
      Side Schemes
      <button id="addSide" style="background:#0a0;color:white;border-radius:6px;padding:2px 6px;margin-left:6px">+</button>
    </div>
    <div id="sideSchemes" class="row"></div>
  </section>

  <!-- Controls -->
  <section class="card row">
    <button id="readyDraw" class="bigbtn">Ready & Draw</button>
    <button id="villainPhase" class="bigbtn" style="background:#f25">Villain Phase</button>
    <button id="advanceStage" class="bigbtn" style="background:#fa0">Advance Stage</button>
  </section>

  <!-- Log -->
  <section class="card">
    <div class="muted small">Log</div>
    <div id="log" class="log"></div>
  </section>
</main>

<script>
const logEl=document.getElementById('log');
function log(msg){ const d=new Date().toLocaleTimeString(); logEl.innerHTML += `<div>[${d}] ${msg}</div>`; logEl.scrollTop=logEl.scrollHeight; }

const state={
  hero:{name:'',deck:[],hand:[],handSize:5},
  villain:{name:'',stages:[],stageIndex:0,hp:0,hpMax:0,attack:0,scheme:0,deck:[],discard:[]},
  minions:0,
  mainScheme:0,
  sideSchemes:[]
};

const HERO_DECKS = {
  spider:{name:'Spider-Man',handSize:5,deck:[
    {title:'Web Swing',text:'Deal 2 damage to 1 enemy.',image:'https://marvelcdb.com/bundles/cards/01001.png'},
    {title:'Agility',text:'Draw 1 card.',image:'https://marvelcdb.com/bundles/cards/01002.png'},
    {title:'Counter-Punch',text:'Deal 1 damage back when attacked.',image:'https://marvelcdb.com/bundles/cards/01003.png'},
    {title:'Resource',text:'Gain 1 resource.',image:'https://marvelcdb.com/bundles/cards/01004.png'},
    {title:'Web Shield',text:'Reduce damage by 2.',image:'https://marvelcdb.com/bundles/cards/01005.png'}
  ]},
  iron:{name:'Iron Man',handSize:6,deck:[
    {title:'Repulsor Blast',text:'Deal 3 damage.',image:'https://marvelcdb.com/bundles/cards/02001.png'},
    {title:'Arc Reactor',text:'Gain 1 resource.',image:'https://marvelcdb.com/bundles/cards/02002.png'},
    {title:'Tech Upgrade',text:'Upgrade a card.',image:'https://marvelcdb.com/bundles/cards/02003.png'},
    {title:'Evade',text:'Avoid damage this turn.',image:'https://marvelcdb.com/bundles/cards/02004.png'},
    {title:'Resource',text:'Gain 1 resource.',image:'https://marvelcdb.com/bundles/cards/02005.png'}
  ]},
  marvel:{name:'Captain Marvel',handSize:6,deck:[
    {title:'Photon Blast',text:'Deal 4 damage.',image:'https://marvelcdb.com/bundles/cards/03001.png'},
    {title:'Cosmic Flight',text:'Evade and draw a card.',image:'https://marvelcdb.com/bundles/cards/03002.png'},
    {title:'Energy Absorption',text:'Heal 2 damage.',image:'https://marvelcdb.com/bundles/cards/03003.png'},
    {title:'Evade',text:'Avoid damage this turn.',image:'https://marvelcdb.com/bundles/cards/03004.png'},
    {title:'Resource',text:'Gain 1 resource.',image:'https://marvelcdb.com/bundles/cards/03005.png'}
  ]}
};

const VILLAIN_DECKS = {
  rhino:{name:'Rhino',stages:[{hp:14,attack:2,scheme:1},{hp:16,attack:3,scheme:2}],encounters:[
    {title:'Rampage',text:'Deal 2 damage to hero.',image:'https://marvelcdb.com/bundles/cards/27174a.png'},
    {title:'Charge',text:'Gain +1 attack this turn.',image:'https://marvelcdb.com/bundles/cards/27175a.png'}
  ]},
  klaw:{name:'Klaw',stages:[{hp:12,attack:1,scheme:2},{hp:16,attack:2,scheme:2}],encounters:[
    {title:'Sonic Boom',text:'Deal 1 damage to all heroes.',image:'https://marvelcdb.com/bundles/cards/17401a.png'},
    {title:'Minion Reinforcements',text:'Put 1 minion into play.',image:'https://marvelcdb.com/bundles/cards/17402a.png'}
  ]},
  ultron:{name:'Ultron',stages:[{hp:14,attack:2,scheme:1},{hp:17,attack:2,scheme:2}],encounters:[
    {title:'Robot Assault',text:'Deal 2 damage.',image:'https://marvelcdb.com/bundles/cards/23001a.png'},
    {title:'Upgrade',text:'Add a minion to villain deck.',image:'https://marvelcdb.com/bundles/cards/23002a.png'}
  ]}
};

const heroSelect=document.getElementById('heroSelect');
const loadHeroBtn=document.getElementById('loadHero');
const handDisplay=document.getElementById('handDisplay');
const deckCount=document.getElementById('deckCount');
const villainSel=document.getElementById('villainSel');
const loadVillainBtn=document.getElementById('loadVillain');
const villainInfo=document.getElementById('villainInfo');
const villainCard=document.getElementById('villainCard');
const readyDrawBtn=document.getElementById('readyDraw');
const villainPhaseBtn=document.getElementById('villainPhase');
const advanceStageBtn=document.getElementById('advanceStage');
const minionsCount=document.getElementById('minionsCount');
const minionPlus=document.getElementById('minionPlus');
const minionMinus=document.getElementById('minionMinus');
const threatCount=document.getElementById('threatCount');
const threatPlus=document.getElementById('threatPlus');
const threatMinus=document.getElementById('threatMinus');
const sideSchemesEl=document.getElementById('sideSchemes');
const addSide=document.getElementById('addSide');

// Hero load
loadHeroBtn.addEventListener('click',()=>{
  const sel=heroSelect.value;
  if(!sel||!HERO_DECKS[sel]){log('Select a hero'); return;}
  const h=HERO_DECKS[sel];
  state.hero.name=h.name; state.hero.deck=h.deck.slice(); state.hero.hand=[]; state.hero.handSize=h.handSize;
  updateHeroHand(); updateDeckCount();
  log(`Loaded hero: ${h.name}`);
});

// Villain load
loadVillainBtn.addEventListener('click',()=>{
  const v=villainSel.value; if(!VILLAIN_DECKS[v]){log('Select villain'); return;}
  const vil=VILLAIN_DECKS[v];
  state.villain.name=vil.name; state.villain.stages=vil.stages.slice(); state.villain.stageIndex=0;
  state.villain.hpMax=vil.stages[0].hp; state.villain.hp=vil.stages[0].hp;
  state.villain.attack=vil.stages[0].attack; state.villain.scheme=vil.stages[0].scheme;
  state.villain.deck=vil.encounters.slice(); state.villain.discard=[];
  shuffleArray(state.villain.deck); displayVillain();
  log(`Villain loaded: ${vil.name}`);
});

// Draw hand (automatic redraw)
readyDrawBtn.addEventListener('click',()=>{
  state.hero.hand=[]; // discard hand
  while(state.hero.hand.length<state.hero.handSize && state.hero.deck.length>0){
    const c=state.hero.deck.shift(); state.hero.hand.push(c);
  }
  updateHeroHand(); updateDeckCount();
  log(`Hand drawn (${state.hero.hand.length} cards)`);
});

// Villain phase
villainPhaseBtn.addEventListener('click',()=>{
  log('Villain phase...');
  addThreat(1);
  const c=drawVillainCard();
  if(c) displayVillainCard(c);
  log(`Villain attacks for ${state.villain.attack}, scheme ${state.villain.scheme}`);
});

// Advance stage
advanceStageBtn.addEventListener('click',()=>{
  if(state.villain.stageIndex+1<state.villain.stages.length){
    state.villain.stageIndex++;
    const s=state.villain.stages[state.villain.stageIndex];
    state.villain.hp=s.hp; state.villain.hpMax=s.hp; state.villain.attack=s.attack; state.villain.scheme=s.scheme;
    displayVillain(); log('Villain stage advanced');
  }else log('Villain at final stage');
});

// Minions
minionPlus.addEventListener('click',()=>{state.minions++; updateMinions();});
minionMinus.addEventListener('click',()=>{state.minions=Math.max(0,state.minions-1); updateMinions();});

// Threat
threatPlus.addEventListener('click',()=>{addThreat(1);});
threatMinus.addEventListener('click',()=>{state.mainScheme=Math.max(0,state.mainScheme-1); updateThreat();});

addSide.addEventListener('click',()=>{
  const id=Date.now();
  const scheme={id,threat:0};
  state.sideSchemes.push(scheme);
  renderSideSchemes();
  log('Added new side scheme');
});

function removeSide(id){
  state.sideSchemes=state.sideSchemes.filter(s=>s.id!==id);
  renderSideSchemes();
  log('Removed side scheme');
}

function changeSideThreat(id,delta){
  const s=state.sideSchemes.find(s=>s.id===id);
  if(s){ s.threat=Math.max(0,s.threat+delta); renderSideSchemes(); }
}

// Helpers
function updateHeroHand(){handDisplay.innerHTML='';state.hero.hand.forEach(c=>{const d=document.createElement('div');d.className='card';d.innerHTML=`<strong>${c.title}</strong><div class="muted small">${c.text}</div>`; if(c.image){const img=document.createElement('img'); img.src=c.image; img.className='cardimg'; d.appendChild(img);} handDisplay.appendChild(d);});}
function updateDeckCount(){deckCount.innerText=state.hero.deck.length;}
function updateMinions(){minionsCount.innerText=state.minions;}
function updateThreat(){threatCount.innerText=state.mainScheme;}
function shuffleArray(a){for(let i=a.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[a[i],a[j]]=[a[j],a[i]];}}

function displayVillain(){
  villainInfo.innerText=`${state.villain.name} — Stage ${state.villain.stageIndex+1}/${state.villain.stages.length} HP ${state.villain.hp}/${state.villain.hpMax} Attack ${state.villain.attack}`;
}

function drawVillainCard(){
  if(!state.villain.deck.length){ if(state.villain.discard.length){state.villain.deck=state.villain.discard.splice(0); shuffleArray(state.villain.deck); log('Villain deck reshuffled');} else return null; }
  const c=state.villain.deck.shift(); state.villain.discard.push(c); return c;
}

function displayVillainCard(c){villainCard.innerHTML=`<strong>${c.title}</strong><div class="muted small" style="margin-top:4px">${c.text}</div>`; if(c.image){const img=document.createElement('img'); img.src=c.image; img.className='cardimg'; villainCard.appendChild(img);}}

function addThreat(n){state.mainScheme+=n; updateThreat();}

function renderSideSchemes(){
  sideSchemesEl.innerHTML='';
  state.sideSchemes.forEach(s=>{
    const d=document.createElement('div'); d.className='side-scheme';
    const span=document.createElement('span'); span.innerText=`Threat: ${s.threat}`;
    const plus=document.createElement('button'); plus.innerText='+'; plus.onclick=()=>changeSideThreat(s.id,1);
    const minus=document.createElement('button'); minus.innerText='−'; minus.onclick=()=>changeSideThreat(s.id
